// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: character.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'character';

export interface CreateCharacterProfileRequest {
  id: string;
  characterName: string;
}

export interface CreateCharacterProfileResponse {
  id: string;
  characterName: string;
  characterTitle: string;
  level: number;
  exp: number;
  nextLevelExp: number;
}

export const CHARACTER_PACKAGE_NAME = 'character';

export interface CharacterServiceClient {
  createCharacterProfile(
    request: CreateCharacterProfileRequest,
    metaData: Metadata,
  ): Observable<CreateCharacterProfileResponse>;
}

export interface CharacterServiceController {
  createCharacterProfile(
    request: CreateCharacterProfileRequest,
  ): Promise<CreateCharacterProfileResponse> | Observable<CreateCharacterProfileResponse> | CreateCharacterProfileResponse;
}

export function CharacterServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createCharacterProfile'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CharacterService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CharacterService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const CHARACTER_SERVICE_NAME = 'CharacterService';
