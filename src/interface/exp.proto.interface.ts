// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: exp.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { ExpStatus, ExpType } from "@prisma/client";
import { Observable } from "rxjs";

export const protobufPackage = "exp";

export interface Localization {
  vn: string;
  en: string;
}

export interface CreateExpResourceRequest {
  title: Localization | undefined;
  description: Localization | undefined;
  type: ExpType;
  maxClaimAccount?: number | undefined;
  maxClaimServer?: number | undefined;
  status: ExpStatus;
  expAmount: number;
}

export interface CreateExpResourceResponse {
  isSuccess: boolean;
  id: string;
}

export interface UserObject {
  userId: string;
}

export interface ValidateExpResourceRequest {
  resourceId: string;
  id: UserObject | undefined;
}

export interface ValidateExpResourceResponse {
  isValid: boolean;
  errorMessage?: string | undefined;
  expAmount: number;
}

export const EXP_PACKAGE_NAME = "exp";

export interface ExpServiceClient {
  createExpResource(
    request: CreateExpResourceRequest,
    metaData: Metadata,
  ): Observable<CreateExpResourceResponse>;

  validateExpResource(
    request: ValidateExpResourceRequest,
    metaData: Metadata,
  ): Observable<ValidateExpResourceResponse>;
}

export interface ExpServiceController {
  createExpResource(
    request: CreateExpResourceRequest,
    metaData: Metadata
  ): Promise<CreateExpResourceResponse> | Observable<CreateExpResourceResponse> | CreateExpResourceResponse;

  validateExpResource(
    request: ValidateExpResourceRequest,
    metaData: Metadata
  ): Promise<ValidateExpResourceResponse> | Observable<ValidateExpResourceResponse> | ValidateExpResourceResponse;
}

export function ExpServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createExpResource", "validateExpResource"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ExpService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ExpService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EXP_SERVICE_NAME = "ExpService";
